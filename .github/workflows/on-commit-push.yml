name: Auto Manage Commit Labels

on:
  push:
    branches:
      - '**'

jobs:
  manage-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch Project, Field, and Status IDs
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
          echo "üì¶ Fetching Project and Status field information..."

          # Fetch project ID
          PROJECT_RESPONSE=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"query":"query { user(login: \"onlyHydra\") { projectsV2(first: 100) { nodes { id title } } } }"}' \
            https://api.github.com/graphql)

          echo "üîç Project Response: $PROJECT_RESPONSE"

          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.user.projectsV2.nodes[] | select(.title == "@onlyHydra'\''s Minishell Kanban") | .id')
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "‚ùå Failed to fetch PROJECT_ID."
            exit 1
          fi
          echo "‚úÖ Fetched PROJECT_ID: $PROJECT_ID"

          # Fetch field IDs
          FIELD_RESPONSE=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d "{\"query\": \"query { node(id: \\\"$PROJECT_ID\\\") { ... on ProjectV2 { fields(first: 100) { nodes { ... on ProjectV2SingleSelectField { id name } } } } } }\"}" \
            https://api.github.com/graphql)

          echo "üîç Field Response: $FIELD_RESPONSE"

          IN_PROGRESS_ID=$(echo "$FIELD_RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          if [ -z "$IN_PROGRESS_ID" ] || [ "$IN_PROGRESS_ID" == "null" ]; then
            echo "‚ùå Failed to fetch Status field ID."
            exit 1
          fi

          # Fetch status options
          STATUS_RESPONSE=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { node(id: \\\"$IN_PROGRESS_ID\\\") { ... on ProjectV2SingleSelectField { options { id name } } } }\"}" \
            https://api.github.com/graphql)

          echo "üîç Status Response: $STATUS_RESPONSE"

          IN_PROGRESS_OPTION_ID=$(echo "$STATUS_RESPONSE" | jq -r '.data.node.options[] | select(.name == "In progress") | .id')
          IN_REVIEW_OPTION_ID=$(echo "$STATUS_RESPONSE" | jq -r '.data.node.options[] | select(.name == "In review") | .id')

          if [ -z "$IN_PROGRESS_OPTION_ID" ] || [ "$IN_PROGRESS_OPTION_ID" == "null" ]; then
            echo "‚ùå Failed to fetch IN_PROGRESS_OPTION_ID."
            exit 1
          fi

          if [ -z "$IN_REVIEW_OPTION_ID" ] || [ "$IN_REVIEW_OPTION_ID" == "null" ]; then
            echo "‚ùå Failed to fetch IN_REVIEW_OPTION_ID."
            exit 1
          fi

          echo "‚úÖ All required IDs fetched successfully."
          echo "‚úÖ Fetched IN_PROGRESS_ID: $IN_PROGRESS_ID"
          echo "‚úÖ Fetched IN_PROGRESS_OPTION_ID: $IN_PROGRESS_OPTION_ID"
          echo "‚úÖ Fetched IN_REVIEW_OPTION_ID: $IN_REVIEW_OPTION_ID"

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "IN_PROGRESS_ID=$IN_PROGRESS_ID" >> $GITHUB_ENV
          echo "IN_PROGRESS_OPTION_ID=$IN_PROGRESS_OPTION_ID" >> $GITHUB_ENV
          echo "IN_REVIEW_OPTION_ID=$IN_REVIEW_OPTION_ID" >> $GITHUB_ENV

      - name: Handle Commit Actions
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          IN_PROGRESS_ID: ${{ env.IN_PROGRESS_ID }}
          IN_PROGRESS_OPTION_ID: ${{ env.IN_PROGRESS_OPTION_ID }}
          IN_REVIEW_OPTION_ID: ${{ env.IN_REVIEW_OPTION_ID }}
        run: |
          echo "üîç Getting latest commit info..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty='%ae')
          COMMIT_SHA=$(git rev-parse HEAD)

          echo "üìù Commit message: $COMMIT_MSG"
          echo "üôç Commit author: $COMMIT_AUTHOR"

          AUTHOR_LOGIN=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA" \
            | jq -r '.author.login')

          echo "üîç Author Login: $AUTHOR_LOGIN"

          ISSUE_NUMBER=$(echo "$COMMIT_MSG" | grep -oP "#\d+" | grep -oP "\d+" | head -n 1)
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "‚ùå No issue number found in commit message. Skipping...."
            exit 0
          fi
          echo "‚úÖ Found ISSUE_NUMBER: $ISSUE_NUMBER"

          # Fetch issue data
          ISSUE_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")

          echo "üîç ISSUE_DATA Response: $ISSUE_DATA"

          ASSIGNEE_LOGIN=$(echo "$ISSUE_DATA" | jq -r '.assignee.login')
          echo "üéØ Assigned to: $ASSIGNEE_LOGIN"

          if [[ "$AUTHOR_LOGIN" == "$ASSIGNEE_LOGIN" ]]; then
            echo "üöÄ First commit detected by assignee!"

            # Handle labels
            LABELS_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels")

            echo "üîç LABELS_RESPONSE: $LABELS_RESPONSE"

            HAS_READY=$(echo "$LABELS_RESPONSE" | jq -r '.[] | select(.name == "ready") | .name')
            HAS_IN_PROGRESS=$(echo "$LABELS_RESPONSE" | jq -r '.[] | select(.name == "in progress") | .name')

            if [ "$HAS_READY" == "ready" ]; then
              echo "üóë Removing 'ready' label..."
              curl -s -X DELETE -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/ready"
            fi

            if [ "$HAS_IN_PROGRESS" != "in progress" ]; then
              echo "üè∑ Adding 'in progress' label..."
              curl -s -X POST -H "Authorization: token $GH_TOKEN" \
                -d "[\"in progress\"]" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels"

              echo "üîÅ Updating project status to 'In Progress'..."
              curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"query\":\"mutation { updateProjectV2ItemFieldValue(input: {projectId: \\\"$PROJECT_ID\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"$IN_PROGRESS_ID\\\", value: { singleSelectOptionId: \\\"$IN_PROGRESS_OPTION_ID\\\" }}) { projectV2Item { id } } }\"}" \
                https://api.github.com/graphql
            fi
          fi

            # Handle [END] marker
            if echo "$COMMIT_MSG" | grep -q "\[END\]"; then
            echo "üèÅ END marker found in commit message. Finalizing work..."

            # Remove "in progress" label
            curl -s -X DELETE -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/in%20progress"

            # Add "in review" label
            curl -s -X POST -H "Authorization: token $GH_TOKEN" \
                -d "[\"in review\"]" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels"

            # Create a pull request
            echo "üì¨ Creating a pull request for branch $BRANCH_NAME..."
            PR_RESPONSE=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"title\": \"Auto PR for #$ISSUE_NUMBER\", \"head\": \"$BRANCH_NAME\", \"base\": \"$BASE_BRANCH\", \"body\": \"Closes #$ISSUE_NUMBER\"}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls")

            echo "üîç Pull Request Response: $PR_RESPONSE"

            PR_URL=$(echo "$PR_RESPONSE" | jq -r '.html_url')

            if [ -z "$PR_URL" ] || [ "$PR_URL" == "null" ]; then
                echo "‚ùå Failed to create pull request. Response: $PR_RESPONSE"
                exit 1
            fi

            echo "‚úÖ Pull request created: $PR_URL"

            # Add a comment to the issue with the PR link
            COMMENT_BODY="A pull request has been created for this issue: [View Pull Request]($PR_URL)."
            curl -s -X POST -H "Authorization: token $GH_TOKEN" \
                -d "{\"body\": \"$COMMENT_BODY\"}" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments"

            # Move issue to "In Review" state on Kanban
            echo "üîÑ Moving issue to 'In Review' state on Kanban..."
            UPDATE_STATUS=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"query\":\"mutation { updateProjectV2ItemFieldValue(input: {projectId: \\\"$PROJECT_ID\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"$IN_PROGRESS_ID\\\", value: { singleSelectOptionId: \\\"$IN_REVIEW_OPTION_ID\\\" }}) { projectV2Item { id } } }\"}" \
                https://api.github.com/graphql)

            echo "üîç Update Status Response: $UPDATE_STATUS"
            fi

