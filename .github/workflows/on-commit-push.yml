name: Auto Manage Commit Labels

on:
  push:
    branches:
      - '**'

jobs:
  manage-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Handle Commit Actions
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
          echo "üîç Getting latest commit info..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty='%ae')
          echo "üìù Commit message: $COMMIT_MSG"
          echo "üôç Commit author: $COMMIT_AUTHOR"
          COMMIT_SHA=$(git rev-parse HEAD)

            AUTHOR_LOGIN=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA" \
            | jq -r '.author.login')

          # Extract issue number
          ISSUE_NUMBER=$(echo "$COMMIT_MSG" | grep -oP "#\d+" | grep -oP "\d+" | head -n 1)
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "‚ùå No issue number found. Exiting..."
            exit 0
          fi
          echo "‚úÖ Found ISSUE_NUMBER: $ISSUE_NUMBER"

          echo "üì¶ Fetching issue info..."
          ISSUE_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")

          ISSUE_NODE_ID=$(echo "$ISSUE_DATA" | jq -r '.node_id')
          ASSIGNEE_LOGIN=$(echo "$ISSUE_DATA" | jq -r '.assignee.login')
          echo "üéØ Assigned to: $ASSIGNEE_LOGIN"

          if [[ "$AUTHOR_LOGIN" == *"$ASSIGNEE_LOGIN"* ]]; then
            echo "üöÄ First commit detected by assignee!"

            # üîÅ Label and project status updates
            echo "üóÇ Removing 'ready' and adding 'in progress'..."
            curl -s -X DELETE -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/ready"

            curl -s -X POST -H "Authorization: token $GH_TOKEN" \
              -d "[\"in progress\"]" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels"

            # üéØ Move in project
            echo "üîÅ Updating project status to 'In Progress'..."

            # Fetch Project ID (REUSE this if you store it elsewhere)
            PROJECT_QUERY=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{"query":"query { user(login: \"onlyHydra\") { projectsV2(first: 10) { nodes { id title } } } }"}' \
              https://api.github.com/graphql)

            PROJECT_ID=$(echo "$PROJECT_QUERY" | jq -r '.data.user.projectsV2.nodes[] | select(.title == "@onlyHydra'\''s Minishell Kanban") | .id')

            # Get Field ID
            FIELD_QUERY=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"query { node(id: \\\"$PROJECT_ID\\\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name } } } } }\"}" \
              https://api.github.com/graphql)

            FIELD_ID=$(echo "$FIELD_QUERY" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')

            # Get 'In Progress' Option ID
            STATUS_QUERY=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"query { node(id: \\\"$FIELD_ID\\\") { ... on ProjectV2SingleSelectField { options { id name } } } }\"}" \
              https://api.github.com/graphql)

            IN_PROGRESS_ID=$(echo "$STATUS_QUERY" | jq -r '.data.node.options[] | select(.name == "In Progress") | .id')

            # Get Item ID
            ITEM_QUERY=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"query { node(id: \\\"$PROJECT_ID\\\") { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { id number } } } } } }\"}" \
              https://api.github.com/graphql)

            ITEM_ID=$(echo "$ITEM_QUERY" | jq -r ".data.node.items.nodes[] | select(.content.number == $ISSUE_NUMBER) | .id")

            # Update Status
            UPDATE_STATUS=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { updateProjectV2ItemFieldValue(input: {projectId: \\\"$PROJECT_ID\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"$FIELD_ID\\\", value: { singleSelectOptionId: \\\"$IN_PROGRESS_ID\\\" }}) { projectV2Item { id } } }\"}" \
              https://api.github.com/graphql)

            echo "üîÅ Project update response: $UPDATE_STATUS"
          else
            echo "üëÄ Commit not made by assignee. No action taken. "
          fi
