name: Auto Create Branch on Issue Assignment

on:
  issues:
    types: [assigned]

jobs:
  create-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract Issue Info and Create Branch
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ASSIGNEE=${{ github.event.issue.assignee.login }}
          BASE_BRANCH="developer"

          # Convert title to underscore_case
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr ' ' '_' | tr -cd '[:alnum:]_')

          # Get the label
          LABEL=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            | jq -r '.labels[].name' | grep -E '^(feature|bug|refactor)$' | head -n 1)

          if [ -z "$LABEL" ]; then
            echo "‚ùå No valid label (feature, bug, refactor) found on the issue."
            exit 1
          fi

          BRANCH_NAME="${LABEL}/${SANITIZED_TITLE}_${ASSIGNEE}"
          echo "Creating branch: $BRANCH_NAME"

          # Clone repo and create branch
          git clone https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }} repo
          cd repo
          git checkout origin/$BASE_BRANCH -b $BRANCH_NAME
          git push --set-upstream origin $BRANCH_NAME
          cd ..

          # Comment with branch info
          COMMENT_BODY="A new branch has been created for this issue: \`$BRANCH_NAME\`.\n\nYou can track the branch [here](https://github.com/${{ github.repository }}/tree/$BRANCH_NAME)."
          curl -X POST -H "Authorization: token $GH_TOKEN" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments

          # Get issue node ID
          ISSUE_NODE_ID=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            | jq -r '.node_id')

          # Get repo node ID
          REPO_NODE_ID=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }} \
            | jq -r '.node_id')

          # Get the OID of the base branch
          BASE_BRANCH_SHA=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/git/ref/heads/$BASE_BRANCH \
            | jq -r '.object.sha')

          echo "Base branch OID: $BASE_BRANCH_SHA"

          # Construct GraphQL query to link the branch
          GRAPHQL_QUERY=$(jq -n \
            --arg issueId "$ISSUE_NODE_ID" \
            --arg repoId "$REPO_NODE_ID" \
            --arg name "$BRANCH_NAME" \
            --arg oid "$BASE_BRANCH_SHA" \
            '{
              query: "mutation CreateBranch($issueId: ID!, $name: String!, $repoId: ID!, $oid: GitObjectID!) { createLinkedBranch(input: {issueId: $issueId, name: $name, repositoryId: $repoId, oid: $oid}) { clientMutationId } }",
              variables: {
                issueId: $issueId,
                name: $name,
                repoId: $repoId,
                oid: $oid
              }
            }')

          # Call the GraphQL API
          GRAPHQL_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY")

          echo "üîç GraphQL response:"
          echo "$GRAPHQL_RESPONSE"

          if echo "$GRAPHQL_RESPONSE" | grep -q "errors"; then
            echo "‚ùå Failed to link branch to issue Development panel."
            exit 1
          else
            echo "‚úÖ Branch successfully linked to Development field."
          fi