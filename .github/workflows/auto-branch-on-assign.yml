name: Auto Create Branch on Issue Assignment

on:
  issues:
    types: [assigned]

jobs:
  create-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract Issue Info and Create Branch
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ASSIGNEE=${{ github.event.issue.assignee.login }}

          # Convert title to underscore_case
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr ' ' '_' | tr -cd '[:alnum:]_')

          # Get the label (only using the first matching from the three types)
          LABEL=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            | jq -r '.labels[].name' | grep -E '^(feature|bug|refactor)$' | head -n 1)

          if [ -z "$LABEL" ]; then
            echo "‚ùå No valid label (feature, bug, refactor) found on the issue."
            exit 1
          fi

          # Include issue number in the branch name so it links in GitHub UI
          BRANCH_NAME="${LABEL}/${ISSUE_NUMBER}_${SANITIZED_TITLE}_${ASSIGNEE}"

          echo "Creating branch: $BRANCH_NAME"

          # Clone the repo and checkout the developer branch
          git clone https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }} repo
          cd repo
          git checkout origin/developer -b $BRANCH_NAME
          git push --set-upstream origin $BRANCH_NAME

          # Comment on the issue with the new branch info
          COMMENT_BODY="A new branch has been created for this issue: \`$BRANCH_NAME\`.\n\nYou can track the branch [here](https://github.com/${{ github.repository }}/tree/$BRANCH_NAME)\n\n git checkout \`$BRANCH_NAME\`."

          curl -X POST -H "Authorization: token $GH_TOKEN" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments

            # Get Issue Node ID
            ISSUE_NODE_ID=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            | jq -r '.node_id')

            # Get Repository Node ID
            REPO_INFO=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }})
            REPO_NODE_ID=$(echo "$REPO_INFO" | jq -r '.node_id')

            # Refined GraphQL Mutation
            GRAPHQL_QUERY=$(jq -n \
            --arg issueId "$ISSUE_NODE_ID" \
            --arg repoId "$REPO_NODE_ID" \
            --arg branchName "$BRANCH_NAME" \
            '{
                query: "mutation CreateBranch($issueId: ID!, $name: String!, $repoId: ID!) { createLinkedBranch(input: {issueId: $issueId, name: $name, repositoryId: $repoId}) { clientMutationId } }",
                variables: {
                issueId: $issueId,
                name: $branchName,
                repoId: $repoId
                }
            }')

            # Call the GraphQL API
            GRAPHQL_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY")

            # Print the response for debugging
            echo "üîç GraphQL response:"
            echo "$GRAPHQL_RESPONSE"

            # Optional: check for success
            if echo "$GRAPHQL_RESPONSE" | grep -q "errors"; then
            echo "‚ùå Failed to link branch to issue development panel."
            exit 1
            else
            echo "‚úÖ Branch linked successfully to Development field."
            fi

          # OPTIONAL: Add issue to Project V2
          PROJECT_ID="4"
          VIEW_ID="1"
          ISSUE_ID="${{ github.event.issue.id }}"

          curl -X POST -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"query": "mutation { addProjectV2ItemById(input: {projectId: \"'${PROJECT_ID}'\", contentId: \"'${ISSUE_ID}'\"}) { projectV2Item { id content { ... on Issue { title url } } } } }"}' \
            https://api.github.com/graphql