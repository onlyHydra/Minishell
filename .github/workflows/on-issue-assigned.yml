name: Auto Create Branch and Assign to Project

on:
  issues:
    types: [assigned]

jobs:
  create-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch Project, Field, and Status IDs
        env:
            GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
            # Fetch project ID
            STATUS_OPTION_ID=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d '{"query": "query { node(id: \"'$FIELD_ID'\") { ... on ProjectV2Field { options(first: 100) { nodes { id name } } } } }"}' \
            https://api.github.com/graphql | jq -r '.data.node.options.nodes[] | select(.name == "Ready") | .id')

            # Fetch field ID for 'Status'
            FIELD_ID=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
              -d '{"query": "query { node(id: \"'$PROJECT_ID'\") { ... on ProjectV2 { fields(first: 100) { nodes { id name } } } } }"}' \
              https://api.github.com/graphql | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
        
            # Fetch status option ID for 'Ready'
            STATUS_OPTION_ID=$(curl -s -X POST -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
              -d '{"query": "query { node(id: \\\"'$FIELD_ID'\\\") { ... on ProjectV2Field { options(first: 100) { nodes { id name } } } } }"}' \
              https://api.github.com/graphql | jq -r '.data.node.options.nodes[] | select(.name == "Ready") | .id')
        
            echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            echo "FIELD_ID=$FIELD_ID" >> $GITHUB_ENV
            echo "STATUS_OPTION_ID=$STATUS_OPTION_ID" >> $GITHUB_ENV
      - name: Extract Issue Info and Create Branch
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS_PAT }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ASSIGNEE=${{ github.event.issue.assignee.login }}
          BASE_BRANCH="developer"

          # Convert title to underscore_case
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr ' ' '_' | tr -cd '[:alnum:]_')

          # Get the label
          LABEL=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            | jq -r '.labels[].name' | grep -E '^(feature|bug|refactor)$' | head -n 1)

          if [ -z "$LABEL" ]; then
            echo "‚ùå No valid label (feature, bug, refactor) found on the issue."
            exit 1
          fi

          BRANCH_NAME="${LABEL}/${SANITIZED_TITLE}_${ASSIGNEE}"
          echo "Creating branch: $BRANCH_NAME"

          # Clone repo and create branch
          git clone https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }} repo
          cd repo
          git checkout origin/$BASE_BRANCH -b $BRANCH_NAME
          git push --set-upstream origin $BRANCH_NAME
          cd ..

          # Comment with branch info
          COMMENT_BODY="A new branch has been created for this issue: \`$BRANCH_NAME\`.\n\nYou can track the branch [here](https://github.com/${{ github.repository }}/tree/$BRANCH_NAME)."
          curl -X POST -H "Authorization: token $GH_TOKEN" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments

          # Add "Ready" label to the issue and move to project
          curl -X POST -H "Authorization: token $GH_TOKEN" \
            -d "[\"ready\"]" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels"

          # Move the issue to the 'Ready' column in the project
          curl -X POST -H "Authorization: bearer $GH_TOKEN" \
            -d '{"query": "mutation { addProjectV2ItemById(input: { projectId: \"'$PROJECT_ID'\", contentId: \"'$ISSUE_NUMBER'\" }) { projectV2Item { id content { ... on Issue { title url } } } } }"}' \
            https://api.github.com/graphql
